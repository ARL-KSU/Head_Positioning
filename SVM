# Support Vector Machine
# Importing the libraries

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.metrics import accuracy_score

# Importing the datasets

datasets = pd.read_csv('Dyad10_Drive1_1.csv')
X = datasets.iloc[:, [0,1]].values
Y = datasets.iloc[:, 0].values

deleteIndexes = []
leftTurn = 0
rightTurn = 0
straightTurn = 0
i = 0
left = -10
right = -70
straight = -40
while i < len(Y):
    if i== 0 or i==len(Y)-1:
        deleteIndexes.append(i)
    else:
        if (Y[i] < right):
            if (Y[i-1] >= right):
                rightTurn = rightTurn + 1
            if (not (Y[i] < Y[i+1] and Y[i] < Y[i-1])):
                deleteIndexes.append(i)
        elif (Y[i] > left):
            if (Y[i-1] <= left):
                leftTurn = leftTurn + 1
            if (not (Y[i] > Y[i+1] and Y[i] > Y[i-1])):
                deleteIndexes.append(i)
        else:
            deleteIndexes.append(i)
            if (Y[i] == straight):
                deleteIndexes.remove(i)
            elif (Y[i] <= left and Y[i-1] > left):
                straightTurn = straightTurn + 1
            elif (Y[i] >= right and Y[i-1] < right):
                straightTurn = straightTurn + 1


    i += 1

# Y = pd.Series(YArray)
print("------------------------------------------------------------------------")
print("Left turns: {}".format(leftTurn))
print("Right turns: {}".format(rightTurn))
print("Straight turns: {}".format(straightTurn))
print("------------------------------------------------------------------------")
YY = np.delete(Y, deleteIndexes)
XX = np.delete(X, deleteIndexes, 0)



# Splitting the dataset into the Training set and Test set
i = 1
while i < 4:
  from sklearn.model_selection import train_test_split
  X_Train, X_Test, Y_Train, Y_Test = train_test_split(XX, YY, test_size = 0.25)

  # Feature Scaling

  from sklearn.preprocessing import StandardScaler
  sc_X = StandardScaler()
  X_Train = sc_X.fit_transform(X_Train)
  X_Test = sc_X.transform(X_Test)

  # Fitting the classifier into the Training set

  from sklearn.svm import SVC
  classifier = SVC(kernel = 'linear')
  classifier.fit(X_Train, Y_Train)

  # Predicting the test set results

  Y_Pred = classifier.predict(X_Test)

  # Making the Confusion Matrix

  from sklearn.metrics import confusion_matrix
  cm = confusion_matrix(Y_Test, Y_Pred)

  print("Confusion matrix: ", cm)

  # get the accuracy
  print("------------------------------------------------------------------------")
  print("Accuracy score: ", accuracy_score(Y_Test, Y_Pred))
  print("------------------------------------------------------------------------")
  # Visualising the Training set results

  from matplotlib.colors import ListedColormap
  X_Set, Y_Set = X_Train, Y_Train
  X1, X2 = np.meshgrid(np.arange(start = X_Set[:, 0].min() - 1, stop = X_Set[:, 0].max() + 1, step = 0.01),
                       np.arange(start = X_Set[:, 1].min() - 1, stop = X_Set[:, 1].max() + 1, step = 0.01))
  plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
               alpha = 0.25, cmap = ListedColormap(('black', 'white', 'black', 'black')))
  plt.xlim(X1.min(), X1.max())
  plt.ylim(X2.min(), X2.max())
  for i, j in enumerate(np.unique(Y_Set)):
      plt.scatter(X_Set[Y_Set == j, 0], X_Set[Y_Set == j, 1],
                  c = ListedColormap(('yellow'))(i), label = j, edgecolors='black')
  plt.title('Support Vector Machine (Training set)')
  plt.xlabel('Head Position - x')
  plt.ylabel('Head Position - y')
  # plt.legend()
  plt.show()

  # Visualising the Test set results

  from matplotlib.colors import ListedColormap
  X_Set, Y_Set = X_Test, Y_Test
  X1, X2 = np.meshgrid(np.arange(start = X_Set[:, 0].min() - 1, stop = X_Set[:, 0].max() + 1, step = 0.01),
                       np.arange(start = X_Set[:, 1].min() - 1, stop = X_Set[:, 1].max() + 1, step = 0.01))
  plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
               alpha = 0.25, cmap = ListedColormap(('black', 'white', 'black', 'black')))
  plt.xlim(X1.min(), X1.max())
  plt.ylim(X2.min(), X2.max())
  for i, j in enumerate(np.unique(Y_Set)):
      plt.scatter(X_Set[Y_Set == j, 0], X_Set[Y_Set == j, 1],
                  c = ListedColormap(('yellow'))(i), label = j, edgecolors='black')
  plt.title('Support Vector Machine (Test set)')
  plt.xlabel('Head Position - x')
  plt.ylabel('Head Position - y')
  # plt.legend()
  plt.show()
  i += 1
